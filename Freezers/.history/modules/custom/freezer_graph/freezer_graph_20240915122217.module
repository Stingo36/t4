<?php




use Drupal\Core\Logger\RfcLogLevel;
use Drupal\menu_test\Access\AccessCheck;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Markup;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Mail\MailFormatHelper;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_mail().
 */
function freezer_graph_mail($key, &$message, $params)
{
    
    switch ($key) {
        case 'alert_email':
            $message['from'] = $params['from'];
            $message['subject'] = $params['title'];
            $message['body'][] = $params['message']; // Ensure the message body is set correctly
            $message['headers']['Cc'] = implode(',', $params['ccEmails']);
            break;

        case 'endpoint_missed':
            $message['from'] = $params['from'];
            $message['subject'] = t('Endpoint Missed Alert');
            $message['headers']['Content-Type'] = 'text/html; charset=UTF-8'; // Correct place for the Content-Type header
            $message['body'][] = Markup::create($params['message']);
            
            // Ensure that $params['cc'] is an array and use it correctly
            if (!empty($params['cc']) && is_array($params['cc'])) {
                $message['headers']['Cc'] = implode(',', $params['cc']);
            } else {
                $message['headers']['Cc'] = ''; // No CC if not set correctly
            }
            break;
        
            
    }
}


function freezer_graph_form_alter(&$form, FormStateInterface $form_state, $form_id)
{



    //! -----------------------

    if ($form_id == 'views_exposed_form' && isset($form['#id'])) {
        // \Drupal::messenger()->addMessage('Form ID: ' . $form['#id']); // Debugging message
        if ($form['#id'] == 'views-exposed-form-freezer-data-block-1') { // Replace with your actual form ID.
            // Check if the user has the 'faculty' role.
            $user = \Drupal::currentUser();
            if (in_array('faculty', $user->getRoles())) {
                // Load the current user's profile entity.
                $profile = \Drupal::entityTypeManager()->getStorage('user')->load($user->id());
                if ($profile && $profile->hasField('field_freezer_name_ref')) {
                    $freezer_names_ref = $profile->get('field_freezer_name_ref')->referencedEntities();
                    $freezer_names = [];
                    foreach ($freezer_names_ref as $ref_node) {
                        $freezer_names[] = $ref_node->getTitle();
                    }

                    // Load all taxonomy terms for 'Freezer Name List'.
                    $vocabulary = 'freezer_name_list'; // Replace with your actual vocabulary machine name.
                    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocabulary);
                    $matching_options = [];

                    // Filter taxonomy terms based on the referenced node titles.
                    foreach ($terms as $term) {
                        if (in_array($term->name, $freezer_names) || $term->tid == 47) { // Include term_id 47 by default
                            $matching_options[$term->tid] = $term->name;
                        }
                    }

                    // Modify the options of the field_freezer_names filter.
                    if (isset($form['field_freezer_names_target_id'])) {
                        $form['field_freezer_names_target_id']['#options'] = $matching_options;
                        \Drupal::messenger()->addMessage('Filters: ' . print_r($matching_options, TRUE)); // Debugging message
                        // Remove the 'All' option and set the default to the second option if available.
                        if (count($matching_options) > 1) {
                            $form['field_freezer_names_target_id']['#default_value'] = array_keys($matching_options)[1];
                        } elseif (count($matching_options) == 1) {
                            $form['field_freezer_names_target_id']['#default_value'] = array_keys($matching_options)[0];
                        }
                        $form['field_freezer_names_target_id']['#required'] = TRUE;
                        \Drupal::messenger()->addMessage('Filter options updated for faculty role.'); // Debugging message
                    } else {
                        \Drupal::messenger()->addMessage('field_freezer_names filter not found.'); // Debugging message
                    }
                } else {
                    \Drupal::messenger()->addMessage('field_freezer_name_ref field not found in user profile.'); // Debugging message
                }
            } else {
                //    \Drupal::messenger()->addMessage('User does not have faculty role.'); // Debugging message
            }
        } else {
            //  \Drupal::messenger()->addMessage('Form ID does not match views-exposed-form-freezer-data-block-1.'); // Debugging message
        }
    } else {
        //\Drupal::messenger()->addMessage('Form ID is not views_exposed_form or form ID not set.'); // Debugging message
    }


    if ($form_id == 'node_set_default_email_id_edit_form') {
        $form['revision']['#access'] = FALSE;
    }

    // if ($form_id == 'user_login_form') {
    // // Add a custom submit handler.
    // $form['actions']['submit']['#submit'][] = 'freezer_graph_user_login_form_submit';
    // }
}








/**
 * Implements hook_form_FORM_ID_alter() to alter the node-freezer-names-edit-form.
 */
function freezer_graph_form_node_freezer_names_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    // Make the title field read-only.
    $form['title']['#disabled'] = TRUE;
    $form['revision_information']['#access'] = FALSE;
}



// function freezer_graph_cron() {
//     // Load the entity type manager service.
//     $entity_type_manager = \Drupal::entityTypeManager();

//     // Comment out the condition that checks for nodes older than 30 days.
//     // Load the current time and calculate the timestamp for 30 days ago.
//     // $current_time = \Drupal::time()->getCurrentTime();
//     // $thirty_days_ago = strtotime('-30 days', $current_time);

//     // Query to get all nodes of content type 'freezer_data'.
//     $query = $entity_type_manager->getStorage('node')->getQuery();
//     $query->condition('type', 'freezer_data')->accessCheck(FALSE);
//     // $query->condition('created', $thirty_days_ago, '<');
//     $nids = $query->execute();

//     if (!empty($nids)) {
//       // Load the nodes.
//       $nodes = $entity_type_manager->getStorage('node')->loadMultiple($nids);

//       // Delete the nodes.
//       foreach ($nodes as $node) {
//         $node->delete();
//       }

//       \Drupal::logger('freezer_graph')->notice('Deleted @count nodes of content type "freezer_data".', ['@count' => count($nids)]);
//     }
//     else {
//       \Drupal::logger('freezer_graph')->notice('No nodes of content type "freezer_data" found to delete.');
//     }
//   }


/**
 * Implements hook_cron().
 */
// function freezer_graph_cron() {
//     // Define the number of nodes to delete per cron run.
//     $nodes_per_cron = 20000;

//     // Load node IDs of the type you want to delete.
//     $query = \Drupal::entityQuery('node')
//       ->condition('type', 'freezer_data') // Replace with your content type machine name
//       ->range(0, $nodes_per_cron)
//       ->accessCheck(FALSE)
//       ->execute();

//     if ($query) {
//       $nodes = Node::loadMultiple($query);
//       foreach ($nodes as $node) {
//         $node->delete();
//       }
//     }
//   }



/**
 * Gets the default email address from the 'set_default_email_id' content type.
 */
function getDefaultEmail()
{
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $default_email_query = $node_storage->getQuery()
        ->condition('type', 'set_default_email_id')
        ->condition('title', 'Default Emails')
        ->range(0, 1)
        ->accessCheck(FALSE);

    $default_email_nodes = $default_email_query->execute();

    if (!empty($default_email_nodes)) {
        $default_email_node_id = reset($default_email_nodes);
        $node = \Drupal\node\Entity\Node::load($default_email_node_id);

        if ($node->hasField('field_set_default_email_id') && !$node->get('field_set_default_email_id')->isEmpty()) {
            return $node->get('field_set_default_email_id')->value;
        }
    }

    // Fallback to a static default email if none found
    return 'sahilst@ext.ncbs.res.in';
}


function getDefaultCcEmails()
{
    $ccEmails = [];
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $default_email_query = $node_storage->getQuery()
        ->condition('type', 'set_default_email_id')
        ->condition('title', 'Default Emails')
        ->range(0, 1)
        ->accessCheck(FALSE);

    $default_email_nodes = $default_email_query->execute();

    if (!empty($default_email_nodes)) {
        $default_email_node_id = reset($default_email_nodes);
        $node = \Drupal\node\Entity\Node::load($default_email_node_id);

        if ($node->hasField('field_set_emails_to_cc') && !$node->get('field_set_emails_to_cc')->isEmpty()) {
            foreach ($node->get('field_set_emails_to_cc') as $cc_email) {
                $ccEmails[] = $cc_email->value;
            }
        }
    }

    return $ccEmails; // Ensure this always returns an array
}


/**
 * Gets the default "from" email address from the 'set_default_email_id' content type.
 */
function getDefaultFromEmail()
{
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $default_email_query = $node_storage->getQuery()
        ->condition('type', 'set_default_email_id')
        ->condition('title', 'Default Emails')
        ->range(0, 1)
        ->accessCheck(FALSE);

    $default_email_nodes = $default_email_query->execute();

    if (!empty($default_email_nodes)) {
        $default_email_node_id = reset($default_email_nodes);
        $node = \Drupal\node\Entity\Node::load($default_email_node_id);

        if ($node->hasField('field_set_from_email_id') && !$node->get('field_set_from_email_id')->isEmpty()) {
            return $node->get('field_set_from_email_id')->value;
        }
    }

    // Fallback to a static "from" email if none found
    return 'noreply@ncbs.res.in';
}

/**
 * Implements hook_cron().
 */
function freezer_graph_cron()
{
    // Get the state service
    $state = \Drupal::state();
    $logger = \Drupal::logger('freezer_graph');

    // Retrieve the dynamic list of FreezerNames from 'freezer_names' content type
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    $query = $node_storage->getQuery();
    $query->condition('type', 'freezer_names')->accessCheck(FALSE);
    $nids = $query->execute();

    $expected_freezer_names = [];
    if (!empty($nids)) {
        $nodes = $node_storage->loadMultiple($nids);
        foreach ($nodes as $node) {
            $expected_freezer_names[] = $node->getTitle();
        }
    }

    // Load the template node with the title "Endpoint Missed Alert"
    $template_query = $node_storage->getQuery();
    $template_query->condition('type', 'templates')
        ->condition('title', 'Endpoint Missed Alert')
        ->accessCheck(FALSE);
    $template_nid = $template_query->execute();

    $template_message = '';
    if (!empty($template_nid)) {
        $template_node = $node_storage->load(reset($template_nid));
        $template_message_raw = $template_node->get('field_message')->value;

        // Render the text with the 'full_html' format
        $template_message = \Drupal\Core\Render\Markup::create(
            check_markup($template_message_raw, 'full_html')
        );
    }

    // Current time
    $current_time = time();
    $current_time_formatted = \Drupal::service('date.formatter')->format($current_time, 'custom', 'Y-m-d H:i:s');

    // Initialize an array to keep track of FreezerNames not hit recently
    $not_hit_freezers = [];

    foreach ($expected_freezer_names as $freezer_name) {
        $state_key_time = 'freezer_graph.last_hit_time.' . $freezer_name;
        $last_hit_time = $state->get($state_key_time, 0);

        // Calculate the time difference
        $time_difference = $current_time - $last_hit_time;

        // Check if the FreezerName has not been hit in the last 2 minutes (120 seconds)
        if ($time_difference > 120) {
            $state_key_value = 'freezer_graph.last_value.' . $freezer_name;
            $last_value = $state->get($state_key_value, 'N/A');

            // Log the retrieved last value
            $logger->debug('Retrieved from state: Freezer: @name, Last Value: @value', ['@name' => $freezer_name, '@value' => $last_value]);

            $last_hit_time_formatted = $last_hit_time ? \Drupal::service('date.formatter')->format($last_hit_time, 'custom', 'Y-m-d H:i:s') : 'N/A';

            $not_hit_freezers[$freezer_name] = [
                'minutes' => round($time_difference / 60, 2),
                'last_hit_time_formatted' => $last_hit_time_formatted,
                'last_value' => $last_value,
            ];
        }
    }

    if (!empty($not_hit_freezers)) {
        // Get dynamic email addresses
        $to = getDefaultEmail();
        $ccEmails = getDefaultCcEmails();
        $fromEmail = getDefaultFromEmail();

        // Log an error and send email for each FreezerName not hit
        foreach ($not_hit_freezers as $freezer_name => $data) {
            // Ensure that the template message is not empty

        }
    } else {
        \Drupal::messenger()->addMessage('All Freezers are working properly.');
    }
}
